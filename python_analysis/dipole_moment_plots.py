#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jun 12 14:32:29 2024
 This code reads the dipole moments for each simulation and plots a scatter plot
 it also writes a file with mean dfar, dloc with their stds. that file is read by dipole_moment_means.py
 it will be edited on jan 28, 2025 to also write a file with mean energies and stds as well for bending dominated cases.
 
 For L = 128: we are ignoring bending dominated condition because there is not enough data.
@author: abhinav
"""

import numpy as np
from matplotlib.colors import ListedColormap, LinearSegmentedColormap
from matplotlib import cm
import matplotlib.pyplot as plt
import math

def angle(x1,y1,x2,y2):
    dx = x2-x1
    dy = y2-y1
    return(math.atan2(dy,dx))

L = 16
L = 64
# L = 128
num_pts = L*L

srand = 112
# srand = 122

cluster_new_flag = 1   # for results from the cluster
hex_flag = 0           # for dipoles with hexagonal bonds forced to be present
hex_rand_flag = 0      # for dipoles with hexagonal bonds randomly removed as per p value
cluster_radial_flag = 1   # for dipoles with just radial bonds

bending_flag = 1                   # set this to 1 if you want only bending dominated cases to be analyzed

num_center = 1
# num_center = 2
# num_center = 5
# num_center = 10
# num_center = 15
# num_center = 20
# num_center = 25
# num_center = 30
# num_center = 35
# num_center = 40

# num_center = 4
# num_center = 8
# num_center = 20
# num_center = 40
# num_center = 60

# num_center = 80
# num_center = 100
# num_center = 120
# num_center = 140
# num_center = 160


#num_center = 2
#num_center = 3
#num_center = 7
#num_center = 12
#num_center = 15
# num_center = 20
#num_center = 25
# num_center = 30
#num_center = 35
#num_center = 40
#num_center = 50
#num_center = 60
#num_center = 70
#num_center = 80
#num_center = 100

#num_center = 15
#num_center = 20
#num_center = 30
#num_center = 40
#num_center = 45

# setting automation flag to 0 or 1
auto_flag = 0
if auto_flag == 1:
    import sys
    num_center = int(sys.argv[1])    
    srand = int(sys.argv[2])


num_dip = num_center*6
num = 5+1                                                                        # the total number of force steps
num = 10+1
#num = 15+1
#num = 10+1
#num = 50+1
#num = 100+1
#num = 1000+1

#loc = 135

pbond = 1
# pbond = 0.5
pbond = 0.55
# pbond = 0.6

#pbond = 0.61
#pbond = 0.63
#pbond = 0.65
#pbond = 0.7

mu = 1
mu_c = 1
tol = 2e-6
tol = 1.0e-6
tol = 1.0e-7

kappa = 1e-6
# kappa = 5e-6
# kappa = 1e-5
#kappa = 2e-5
# kappa = 5e-5

# kappa = 1e-4

#kappa = 1e-2

rlen = 0.6    
rlen = 0.7
rlen = 0.8
rlen = 0.9
rlen_txt = "%.4f" % rlen
rlen_txt_ring = "%.9f" % 0.1


diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                     '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
                     '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                     '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,444444', '444444,454444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
                     '555555,505555', '555555,515555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                     '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                     '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                     '888888,808888', '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                     '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
                     '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900004', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

#=========================================================================================================================================================================================================
if hex_rand_flag == 1:
    if (num_center == 10 or num_center == 15) and srand == 112:
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
                             '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,444444', '444444,454444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,515555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                             '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                             '888888,808888', '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900004', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

    if (num_center == 20) and srand == 112:
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
                             '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,454444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,585555', '555555,595555',
                             '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                             '888888,808888', '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900004', '900000,900005', '900000,900006', '900000,900008', '900000,900009']

    if (num_center == 25) and srand == 112:
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,181111',
                             '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222',
                             '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                             '444444,404444', '444444,424444', '444444,444444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,515555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                             '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,777777', '777777,787777', '777777,797777',
                             '888888,808888', '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,898888',
                             '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900004', '900000,900005', '900000,900006', '900000,900007', '900000,900008']

    if (num_center == 30) and srand == 112:
        diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,282222', '222222,292222',
                             '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,353333', '333333,363333', '333333,393333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,444444', '444444,454444', '444444,474444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,515555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                             '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                             '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,919999', '999999,929999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

    if (num_center == 35) and srand == 112:
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,272222', '222222,282222', '222222,292222',
                             '333333,303333', '333333,323333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                             '444444,414444', '444444,424444', '444444,434444', '444444,444444', '444444,454444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,575555', '555555,585555', '555555,595555',
                             '666666,616666', '666666,626666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,797777',
                             '888888,808888', '888888,818888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900002', '900000,900003', '900000,900004', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
        
    if (num_center == 40) and srand == 112:
        diff_network_list = ['111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
                             '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,454444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,515555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,585555', '555555,595555',
                             '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                             '888888,808888', '888888,818888', '888888,828888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900004', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

#=========================================================================================================================================================================================================

if cluster_radial_flag == 1:
    if num_center == 2 and srand == 112:
        # diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                      '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
        #                      '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
        #                      '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,444444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
        #                      '555555,505555', '555555,515555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                      '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
        #                      '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
        #                      '888888,808888', '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
        #                      '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
        #                      '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900004', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    
    if num_center == 5 and srand == 112:
        # diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                       '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
        #                       '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
        #                       '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,444444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
        #                       '555555,505555', '555555,515555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                       '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
        #                       '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
        #                       '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
        #                       '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
        #                       '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
    
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']

    if (num_center == 10 or num_center == 15) and srand == 112:
        # diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                       '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
        #                       '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
        #                       '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,444444', '444444,464444', '444444,474444', '444444,484444', '444444,494444',
        #                       '555555,505555', '555555,515555', '555555,525555', '555555,535555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                       '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
        #                       '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
        #                       '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,888888', '888888,898888',
        #                       '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
        #                       '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
        
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    
    if num_center == 20 and srand == 112:
        # diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                       '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
        #                       '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
        #                       '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,464444', '444444,484444', '444444,494444',
        #                       '555555,505555', '555555,515555', '555555,525555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                       '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
        #                       '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
        #                       '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
        #                       '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
        #                       '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
    
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    
    if num_center == 25 and srand == 112:
        # diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                       '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
        #                       '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
        #                       '444444,404444', '444444,414444', '444444,424444', '444444,464444', '444444,484444', '444444,494444',
        #                       '555555,505555', '555555,515555', '555555,525555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                       '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
        #                       '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
        #                       '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
        #                       '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
        #                       '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
    
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    
    if num_center == 30 and srand == 112:
        # diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                      '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,282222', '222222,292222',
        #                      '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,363333', '333333,393333',
        #                      '444444,404444', '444444,414444', '444444,424444', '444444,444444', '444444,484444', '444444,494444',
        #                      '555555,505555', '555555,515555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                      '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666',
        #                      '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
        #                      '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
        #                      '999999,909999', '999999,929999', '999999,929999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
        #                      '900000,900000', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
    
        diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    
    if num_center == 35 and srand == 112:
        # diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                      '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,282222', '222222,292222',
        #                      '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,363333', '333333,393333',
        #                      '444444,404444', '444444,414444', '444444,424444', '444444,444444', '444444,484444', '444444,494444',
        #                      '555555,505555', '555555,515555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                      '666666,606666', '666666,616666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666',
        #                      '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
        #                      '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
        #                      '999999,909999', '999999,929999', '999999,929999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
        #                      '900000,900000', '900000,900002', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
    
    
        diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    
    if num_center == 40 and srand == 112:
        # diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
        #                      '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,282222', '222222,292222',
        #                      '333333,313333', '333333,323333', '333333,333333', '333333,363333', '333333,393333',
        #                      '444444,404444', '444444,414444', '444444,424444', '444444,444444', '444444,484444',
        #                      '555555,505555', '555555,515555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
        #                      '666666,606666', '666666,616666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,686666',
        #                      '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,757777', '777777,767777', '777777,777777', '777777,797777',
        #                      '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
        #                      '999999,909999', '999999,929999', '999999,929999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
        #                      '900000,900000', '900000,900002', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
    
        diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    
    if num_center == 40 and kappa == 1e-5 and srand == 112:
        diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,282222', '222222,292222',
                             '333333,313333', '333333,323333', '333333,333333', '333333,363333', '333333,393333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,444444', '444444,484444',
                             '555555,505555', '555555,515555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                             '666666,606666', '666666,616666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,686666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,757777', '777777,767777', '777777,777777', '777777,797777',
                             '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,929999', '999999,929999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900002', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']
    
if hex_flag == 1:    
    if num_center == 20 and srand == 112 and hex_flag == 1:
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                              '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
                              '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                              '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,464444', '444444,484444', '444444,494444',
                              '555555,505555', '555555,515555', '555555,525555', '555555,545555', '555555,555555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                              '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                              '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                              '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                              '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,969999', '999999,979999', '999999,989999', '999999,999999',
                              '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

    if num_center == 25 and srand == 112 and hex_flag == 1:
        diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                              '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
                              '333333,303333', '333333,313333', '333333,333333', '333333,343333', '333333,353333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
                              '444444,404444', '444444,414444', '444444,424444', '444444,464444', '444444,484444', '444444,494444',
                              '555555,505555', '555555,515555', '555555,525555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                              '666666,606666', '666666,616666', '666666,626666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666', '666666,696666',
                              '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,747777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                              '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                              '999999,909999', '999999,919999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
                              '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

    if num_center == 30 and srand == 112 and hex_flag == 1:
        diff_network_list = ['111111,101111', '111111,131111', '111111,161111', '111111,171111', '111111,191111',
                             '222222,202222', '222222,212222', '222222,242222', '222222,252222', '222222,282222', '222222,292222',
                             '333333,323333', '333333,333333', '333333,363333', '333333,393333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,515555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', 
                             '666666,606666', '666666,616666', '666666,636666', '666666,646666', '666666,656666', '666666,676666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,747777', '777777,757777', '777777,767777', '777777,787777', '777777,797777',
                             '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,929999', '999999,929999', '999999,979999',
                             '900000,900000', '900000,900002', '900000,900005', '900000,900006', '900000,900007']

    if num_center == 35 and srand == 112 and hex_flag == 1:
        diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,282222', '222222,292222',
                             '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,363333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,444444', '444444,484444', '444444,494444',
                             '555555,505555', '555555,515555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                             '666666,606666', '666666,616666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,676666', '666666,686666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,757777', '777777,767777', '777777,777777', '777777,787777', '777777,797777',
                             '888888,818888', '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,929999', '999999,929999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
                             '900000,900000', '900000,900002', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']

    if num_center == 40 and srand == 112 and hex_flag == 1:
        diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
                             '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,282222', '222222,292222',
                             '333333,313333', '333333,323333', '333333,333333', '333333,363333', '333333,393333',
                             '444444,404444', '444444,414444', '444444,424444', '444444,444444', '444444,484444',
                             '555555,505555', '555555,515555', '555555,545555', '555555,565555', '555555,575555', '555555,585555', '555555,595555',
                             '666666,606666', '666666,616666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,686666',
                             '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,757777', '777777,767777', '777777,777777', '777777,797777',
                             '888888,828888', '888888,838888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
                             '999999,909999', '999999,929999', '999999,929999', '999999,949999', '999999,959999', '999999,989999',
                             '900000,900000', '900000,900002', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']


# if num_center == 40:
#     diff_network_list = ['111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111',
#                          '222222,202222', '222222,212222', '222222,222222', '222222,232222', '222222,242222', '222222,252222', '222222,262222', '222222,272222', '222222,282222', '222222,292222',
#                          '333333,303333', '333333,313333', '333333,323333', '333333,333333', '333333,343333', '333333,363333', '333333,373333', '333333,383333', '333333,393333',
#                          '444444,404444', '444444,414444', '444444,424444', '444444,434444', '444444,464444', '444444,484444', '444444,494444',
#                          '555555,505555', '555555,515555', '555555,525555', '555555,545555', '555555,565555', '555555,585555', '555555,595555',
#                          '666666,606666', '666666,616666', '666666,636666', '666666,646666', '666666,656666', '666666,666666', '666666,686666', '666666,696666',
#                          '777777,707777', '777777,717777', '777777,727777', '777777,737777', '777777,757777', '777777,767777', '777777,777777', '777777,797777',
#                          '888888,818888', '888888,828888', '888888,848888', '888888,858888', '888888,868888', '888888,878888', '888888,888888', '888888,898888',
#                          '999999,909999', '999999,929999', '999999,939999', '999999,949999', '999999,959999', '999999,979999', '999999,989999', '999999,999999',
#                          '900000,900000', '900000,900001', '900000,900002', '900000,900003', '900000,900005', '900000,900006', '900000,900007', '900000,900008', '900000,900009']


# for 10 test cases in 10 different seed cases
# srand 115 does not work at all
# srand 114 is bad for N >= 15

if srand != 112:
    diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    if L == 128:
        diff_network_list = ['111111,101111', '111111,111111']
        if srand == 116 and num_center == 80:
            diff_network_list = ['111111,101111']
            
    # if (srand == 114 and num_center == 10) or (srand == 120 and num_center == 10):
    #     diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']
    # elif (srand == 122 and num_center == 10):
    #     diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 113 and (num_center == 15 or num_center == 20 or num_center == 25 or num_center == 30 or num_center == 35 or num_center == 40)):
    #     diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,181111', '111111,191111']
    # # elif (srand == 114 and (num_center == 15 or num_center == 20 or num_center == 25 or num_center == 30 or num_center == 35 or num_center == 40)):
    # #     diff_network_list = ['111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 114 and (num_center == 30)):
    #     diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 116 and (num_center == 35 or num_center == 40)):
    #     diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 117 and (num_center >= 15)):
    #     diff_network_list = ['111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    #     # if (num_center == 30 or num_center == 35):
    #     #     diff_network_list = ['111111,111111', '111111,131111', '111111,141111', '111111,161111', '111111,171111', '111111,181111']
    #     # if (num_center == 40):
    #     #     diff_network_list = ['111111,131111', '111111,141111', '111111,171111', '111111,181111']
    #     if (num_center >= 30):
    #         diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 118 and (num_center >= 15)):
    #     diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 119 and (num_center >= 35)):
    #     diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 120 and (num_center >= 15)):
    #     diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']
    #     # if (num_center == 30):
    #     #     diff_network_list = ['111111,101111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']
    #     # if (num_center >= 35):
    #     #     diff_network_list = ['111111,121111', '111111,141111', '111111,161111', '111111,171111', '111111,191111']
    #     if (num_center >= 30):
    #         diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 121 and (num_center >= 15)):
    #     diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,181111', '111111,191111']
    #     if (num_center >= 25):
    #         # diff_network_list = ['111111,101111', '111111,131111', '111111,141111', '111111,161111', '111111,181111']
    #         diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 122 and (num_center == 15 or num_center == 20 or num_center == 25)):     # srand = 122 does not work for N >= 30 !!
    #     diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    # elif (srand == 122 and num_center >= 30):
    #     diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    #----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------        
    if L == 64 and cluster_radial_flag == 1:
        if (srand == 114 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 117 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,171111', '111111,181111', '111111,191111']     #161111 blows up...
        if (srand == 113 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']
    #-----------------------------------------------------------------------------------------------------

    if L == 64 and hex_flag == 1:
        if (srand == 114 and num_center == 20):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 114 and num_center == 25):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,191111']     #141111 blows up...
        if (srand == 114 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111']     #141111 blows up...
        if (srand == 114 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 116 and num_center == 20):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 116 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 117 and num_center == 10):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 117 and num_center == 20):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 117 and num_center == 25):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 117 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 118 and num_center == 25):
            diff_network_list = ['111111,101111', '111111,111111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 118 and num_center == 30):
            diff_network_list = ['111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 119 and num_center == 15):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']     #141111 blows up...
        if (srand == 119 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 120 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 120 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 120 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 121 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 122 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
    #-----------------------------------------------------------------------------------------------------

    if L == 64 and hex_rand_flag == 1:
        if (srand == 113 and num_center == 20):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 113 and num_center == 30):
            diff_network_list = ['111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 113 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 114 and num_center == 20):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 114 and num_center == 25):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 114 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,171111', '111111,181111']     #141111 blows up...
        if (srand == 114 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111']     #141111 blows up...

        if (srand == 116 and num_center == 25):
            diff_network_list = ['111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 116 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,171111']     #141111 blows up...
        if (srand == 116 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']     #141111 blows up...

        if (srand == 117 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 117 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...

        if (srand == 118 and num_center == 25):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 118 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,121111', '111111,151111', '111111,161111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 118 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 118 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']     #141111 blows up...

        if (srand == 119 and num_center == 25):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 119 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']     #141111 blows up...
        if (srand == 119 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,171111', '111111,191111']     #141111 blows up...

        if (srand == 120 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111']     #141111 blows up...

        if (srand == 121 and num_center == 20):
            diff_network_list = ['111111,101111', '111111,111111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 121 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,161111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 121 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 121 and num_center == 40):
            diff_network_list = ['111111,101111', '111111,111111', '111111,131111', '111111,151111', '111111,161111', '111111,171111', '111111,181111']     #141111 blows up...

        if (srand == 122 and num_center == 25):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']     #141111 blows up...
        if (srand == 122 and num_center == 30):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,161111', '111111,171111', '111111,191111']     #141111 blows up...
        if (srand == 122 and num_center == 35):
            diff_network_list = ['111111,101111', '111111,111111', '111111,121111', '111111,151111', '111111,181111', '111111,191111']     #141111 blows up...
        if (srand == 122 and num_center == 40):
            diff_network_list = ['111111,111111', '111111,121111', '111111,131111', '111111,141111', '111111,151111', '111111,171111', '111111,181111', '111111,191111']     #141111 blows up...


diff_network_list = np.array(diff_network_list)

# if num_center == 15:
#     diff_network_list = np.delete(diff_network_list, 5)


pbond_string = "%.2f" % pbond # to write the filename
tol_str = "%.2e" % tol # to write the filename
kappa_str = "%.2e" % kappa # to write the filename
if kappa == 0:
    kappa_str = "0.00e+00" # to write the filename
    
mu_str = "%.4f" % mu # to write the filename
mu_c_str = "%.4f" % mu_c # to write the filename

base = "/home/abhinav/david/"


# # finding out the nodes in outer annular ring from master ring node file (this is the network that changes over different realizations
# # fname_ring_nodes = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_force/txt/area/ring_nodes_srand_112_1_6_1.00_1.00e-07_1.00e-06__0.011150000_1.0000_1.0000_10_force.txt'
# fname_ring_nodes = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_force/txt/area/ring_nodes_srand_112_1_6_1.00_1.00e-07_1.00e-06__0.9000_1.0000_1.0000_10_force.txt'
# if L != 64:
#     fname_ring_nodes = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_force/txt/area/ring_nodes_srand_116_128_1_6_1.00_1.00e-07_1.00e-06__0.9000_1.0000_1.0000_10_force.txt'

# print("outer ring nodes filename: ",fname_ring_nodes)        
# ring_nodes = np.loadtxt(fname_ring_nodes)
# ring_nodes = ring_nodes[:,1]   # the 0th column is just a count
# ring_nodes = ring_nodes.astype(int)


en_tot = []
en_stretch = []
en_compress = []
en_bend = []
en_arp = []

bndry_force = []

dip_moment = []
loc_dip_moment = []
far_dip_moment = []
ratio_dip_moment = []

ring_en_elastic = []
ring_en_bend = []

pval_inner = []
coord_num = []

inner_stress = []
ring_stress = []
data_disp_all = []

for diff_network in diff_network_list:
    # if (num_center == 10 or num_center == 15) and diff_network == '888888,878888':
        # continue
    
    ranseed = '667720,601210'    # -- network 1

    if kappa == 2e-7:
        kappa_fname = 'kappa2_2e-7/'
    elif kappa == 5e-7:
        kappa_fname = 'kappa2_5e-7/'
    elif kappa == 1e-6:
        kappa_fname = 'kappa2_e-6/'
    elif kappa == 1e-5:
        kappa_fname = 'kappa2_e-5/'
    elif kappa == 2e-6:
        kappa_fname = 'kappa2_2e-6/'
    elif kappa == 5e-6:
        kappa_fname = 'kappa2_5e-6/'
    elif kappa == 2e-5:
        kappa_fname = 'kappa2_2e-5/'
    elif kappa == 5e-5:
        kappa_fname = 'kappa2_5e-5/'
    elif kappa == 1e-4:
        kappa_fname = 'kappa2_e-4/'
    elif kappa == 2e-4:
        kappa_fname = 'kappa2_2e-4/'
    elif kappa == 5e-4:
        kappa_fname = 'kappa2_5e-4/'
    elif kappa == 1e-3:
        kappa_fname = 'kappa2_e-3/'
    elif kappa == 2e-3:
        kappa_fname = 'kappa2_2e-3/'
    elif kappa == 5e-3:
        kappa_fname = 'kappa2_5e-3/'
    elif kappa == 1e-2:
        kappa_fname = 'kappa2_e-2/'
    elif kappa == 0:
        kappa_fname = 'kappa2_0/'
    
    folder = 'lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_cluster/'+ kappa_fname +ranseed+"/"+str(srand)+"/"+diff_network+"/"
    
    if cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 0 and cluster_radial_flag == 0:
        folder = 'cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash/'+ kappa_fname +ranseed+"/"+str(srand)+"/"+diff_network+"/"
    elif cluster_new_flag == 1 and hex_flag == 1 and hex_rand_flag == 0 and cluster_radial_flag == 0:
        folder = 'cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_hex/'+ kappa_fname +ranseed+"/"+str(srand)+"/"+diff_network+"/"
    elif cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 1 and cluster_radial_flag == 0:
        folder = 'cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_random_dipole_hex_bonds/'+ kappa_fname +ranseed+"/"+str(srand)+"/"+diff_network+"/"
    elif cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 0 and cluster_radial_flag == 1:
        folder = 'cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_radial/'+ kappa_fname +ranseed+"/"+str(srand)+"/"+diff_network+"/"

    fname = base+folder+"txt/area/"+"bndry_node_dipole_moment_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"    
    if L != 64:
        fname = base+folder+"txt/area/"+"bndry_node_dipole_moment_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"    
        
    data = np.loadtxt(fname)    
    dip_moment_temp = data[1]
    dip_moment.append(dip_moment_temp)
    
    en_fname = base+folder+"energy/strain/"+"Lattice_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+"_force.txt"    
    if L != 64:
        en_fname = base+folder+"energy/strain/"+"Lattice_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+"_force.txt"    
    
    en_temp = np.loadtxt(en_fname)
    en_tot.append(en_temp[-1,0])
    en_stretch.append(en_temp[-1,1])
    en_compress.append(en_temp[-1,2])
    en_bend.append(en_temp[-1,3])
    en_arp.append(en_temp[-1,4])
    
    force_fname = base+folder+"txt/area/"+"bndry_force_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    if L != 64:
        force_fname = base+folder+"txt/area/"+"bndry_force_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
        
    bndry_force_temp = np.loadtxt(force_fname)
    bndry_force.append(bndry_force_temp[-1,1])
    
    #reading local dipole moment
    fname = base+folder+"txt/area/"+"dipole_moment_ratio_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"    
    if L != 64:
        fname = base+folder+"txt/area/"+"dipole_moment_ratio_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"    

    loc_data = np.loadtxt(fname)    
    loc_dip_moment_temp = loc_data[1]
    far_dip_moment_temp = loc_data[2]
    ratio_dip_moment_temp = loc_data[3]
    loc_dip_moment.append(loc_dip_moment_temp)
    far_dip_moment.append(far_dip_moment_temp)
    ratio_dip_moment.append(ratio_dip_moment_temp)
    
    # ring energy:: not sure why this was here so removing it
    # if hex_rand_flag == 0 and cluster_radial_flag == 0:    # only do this for dipoles with all hex bonds present
    #     if num_center == 5 or num_center == 10 or num_center == 15:
    #         fname_ring_en = base+folder+'energy/node/Lattice_node_' + str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt_ring+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+"_"+str(num-1)+"_force.txt"        # input file name
    #     else:
    #     # not sure why the previous line is there. changinn it a bit below:
    #         fname_ring_en = base+folder+'energy/node/Lattice_node_' + str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+"_"+str(num-1)+"_force.txt"        # input file name
    #     print("outer ring energy filename: ",fname_ring_en)        
    #     ring_en = np.loadtxt(fname_ring_en)
    #     ring_en = ring_en[ring_nodes,:]   # the 0th column is just a count
    #     ring_en_elastic.append(np.sum(ring_en[:,1:7]))
    #     ring_en_bend.append(np.sum(ring_en[:,7:]))
        
    # reading the p-values to find their mean and write out to means folder
    # fname_pval_inner = base+folder+"txt/area/"+"inner_bond_count_srand_"+str(srand)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    # data_pval_inner = np.loadtxt(fname_pval_inner)
    # pval_inner.append(data_pval_inner[2])
    
    # reading coordination number files to find the means
    fname_coord = base+folder+"txt/area/"+"mean_coord_num_"+str(srand)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    data_coord = np.loadtxt(fname_coord)
    coord_num.append(data_coord[1])

    # reading the inner stress files to find the means
    fname_inner_stress = base+folder+"txt/area/"+"total_inner_stress_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    if L != 64:
        fname_inner_stress = base+folder+"txt/area/"+"total_inner_stress_"+str(srand)+"_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    data_inner_stress = np.loadtxt(fname_inner_stress)
    inner_stress.append(data_inner_stress[1])

    # reading the stress in rings files to find the means
    fname_ring_stress = base+folder+"txt/area/"+"stress_ring_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    if L != 64:
        fname_ring_stress = base+folder+"txt/area/"+"stress_ring_"+str(srand)+"_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"        
    data_ring_stress = np.loadtxt(fname_ring_stress)
    ring_stress.append(data_ring_stress)
    
    
    # reading the displacements to find the mean displacements    
    fname_disp = base+folder+"txt/displacement/"+"bndry_node_radial_disp_mean_"+str(srand)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"    
    if L != 64:
        fname_disp = base+folder+"txt/displacement/"+"bndry_node_radial_disp_mean_"+"srand_"+str(srand)+"_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"    
    data_disp = np.loadtxt(fname_disp)

    data_disp_all.append(data_disp)

# not sure why this was here so removing it    
# if hex_rand_flag == 0 and cluster_radial_flag == 0:
#     ring_en_elastic = np.array(ring_en_elastic)
#     ring_en_bend = np.array(ring_en_bend)
#     ring_en_ratio = np.array(ring_en_elastic/ring_en_bend)

ring_stress = np.array(ring_stress)

loc_dip_moment = np.array(loc_dip_moment)    
far_dip_moment = np.array(far_dip_moment)
ratio_dip_moment = np.array(ratio_dip_moment)

data_disp_all = np.array(data_disp_all)


en_tot = np.array(en_tot)
en_stretch = np.array(en_stretch)
en_compress = np.array(en_compress)
en_bend = np.array(en_bend)
en_arp = np.array(en_arp)

en_elast = en_stretch + en_compress
en_ratio = en_elast/en_bend

stretch_dom = np.squeeze(np.where(en_ratio >= 1.0))
bend_dom = np.where(en_ratio < 1.0)
bend_dom = np.squeeze(bend_dom, axis = 0)


if hex_flag == 1 or bending_flag == 0:
    bend_dom = np.arange(0,len(en_ratio))

# if L ==128 and srand == 116 and num_center == 80:
#     bend_dom = [0]
    

#***********************************************************************************************************************************************
# writing the bending dominated cases to file
#***********************************************************************************************************************************************
fout_folder = "lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_cluster/"
if cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 0 and cluster_radial_flag == 0:
    fout_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash/"
elif cluster_new_flag == 1 and hex_flag == 1 and hex_rand_flag == 0 and cluster_radial_flag == 0:
    fout_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_hex/"
elif cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 1 and cluster_radial_flag == 0:
    fout_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_random_dipole_hex_bonds/"
elif cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 0 and cluster_radial_flag == 1:
    fout_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_radial/"

bend_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"bend_dom_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    bend_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"bend_dom_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    bend_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"all_dom_bend_dom_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    
# print('here all individual forces on BOUNDARY nodes are written to file : ',force_outfname)    
heading = 'diffnetwork1,diffnetwork2'
fmt = '%30s'
np.savetxt(bend_outfname, diff_network_list[bend_dom], header = heading, fmt = fmt)
print('Bending dominated cases for set p, N and kappa and srand saved to file: ', bend_outfname)

#***********************************************************************************************************************************************

# dfar means for all stretching and bending cases
dip_moment = np.array(dip_moment)
mean_dip_moment = np.mean(dip_moment)
mean_dip_moment_str = "%.2e" % mean_dip_moment
std_dip_moment = np.std(dip_moment)

coord_num = np.array(coord_num)
pval_from_coord_num = coord_num/6.


#***********************************************************************************************************************************************
# reading the outer ring energy from each node
#***********************************************************************************************************************************************



#***********************************************************************************************************************************************
#                                       PLOTTING BELOW
fname_folder = "lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_cluster/"
if cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 0 and cluster_radial_flag == 0:
    fname_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash/"
elif cluster_new_flag == 1 and hex_flag == 1 and hex_rand_flag == 0 and cluster_radial_flag == 0:
    fname_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_hex/"
elif cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 1 and cluster_radial_flag == 0:
    fname_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_random_dipole_hex_bonds/"
elif cluster_new_flag == 1 and hex_flag == 0 and hex_rand_flag == 0 and cluster_radial_flag == 1:
    fname_folder = "cluster_download/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp_bash_radial/"
#***********************************************************************************************************************************************
fname_plot = base + fname_folder + kappa_fname +ranseed+"/"+str(srand)+"/"
if L != 64:
    fname_plot = base + fname_folder + kappa_fname +ranseed+"/"+str(srand)+"/"+str(L)+"_"
if bending_flag == 0:
    fname_plot = base + fname_folder + kappa_fname +ranseed+"/"+str(srand)+"/"+str(L)+"_all_dom_"
    

colors=np.full(len(en_ratio), 'grey')
colors[bend_dom] = 'blue'

# plotting the dipole moments
plt.figure(figsize=(8, 5), dpi=300)

#plt.scatter(np.arange(0,np.shape(dip_moment)[0]),dip_moment, marker = '.', s = 500, c = 'g', alpha=0.5, label = pbond_string)# Network 1')    
plt.scatter(np.arange(0,np.shape(dip_moment)[0]),dip_moment, marker = '.', s = 500, c = colors, alpha=0.5, label = pbond_string)# Network 1')    

plt.xlabel("Simulation number", fontsize = 15)
plt.ylabel("Dipole moment", fontsize = 15)
plt.xticks([0,25,50,75,100], fontsize = 15)
plt.yticks(fontsize = 15)
plt.yscale('log')

plt.title('Mean Dipole Moment = ' + mean_dip_moment_str, fontsize = 15)
plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)

plt.legend(loc = 'lower right')
plt.savefig(fname_plot+"dip_moment_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

plt.clf()
plt.close()

# plotting the dipole moments
plt.figure(figsize=(8, 5), dpi=300)


if num_center == 5:
    di_moment5 = dip_moment
    x5 = np.shape(dip_moment)[0]
elif num_center == 10:
    di_moment10 = dip_moment
    x10 = np.shape(dip_moment)[0]
elif num_center == 15:
    di_moment15 = dip_moment
    x15 = np.shape(dip_moment)[0]
    
    
# # plotting the dipole moments
# if num_center == 15:
#     plt.figure(figsize=(8, 5), dpi=300)
#     plt.scatter(np.arange(0,x5),di_moment5, marker = '.', s = 500, c = 'g', alpha=0.5, label = '5 dipoles')# Network 1')    
#     plt.scatter(np.arange(0,x10),di_moment10, marker = '.', s = 500, c = 'b', alpha=0.5, label = '10 dipoles')# Network 1')    
#     plt.scatter(np.arange(0,x15),di_moment15, marker = '.', s = 500, c = 'r', alpha=0.5, label = '15 dipoles')# Network 1')    
    
#     plt.xlabel("Simulation number", fontsize = 15)
#     plt.ylabel("Dipole moment", fontsize = 15)
#     plt.xticks([0,25,50,75,100], fontsize = 15)
#     plt.yticks(fontsize = 15)
#     plt.yscale('log')
#     # plt.ylim([0,0.001])
#     # plt.ylim([0,0.01])
#     plt.ylim([1e-4,6e-2])
    
#     # plt.title('Mean Dipole Moment = ' + mean_dip_moment_str, fontsize = 15)
#     plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
    
#     plt.legend(loc = 'best')
#     plt.savefig(fname_plot+"dip_moment_scatter_5_10_15_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")
    
#     plt.clf()
#     plt.close()

#***********************************************************************************************************************************************
# plotting the stretching to bending energy moments
plt.figure(figsize=(8, 5), dpi=300)

#plt.scatter(np.arange(0,np.shape(stretch_dom)[0]),en_ratio[stretch_dom], marker = '.', s = 500, c = 'b', alpha=0.5, label = pbond_string)# Network 1')    
#plt.scatter(np.arange(0,np.shape(bend_dom)[0]),en_ratio[bend_dom], marker = '.', s = 500, c = 'g', alpha=0.5, label = pbond_string)# Network 1')    
plt.scatter(np.arange(0,np.shape(en_ratio)[0]), en_ratio, marker = '.', s = 500, c = colors, alpha=0.5)#, label = pbond_string)# Network 1')    

plt.xlabel("Simulation number", fontsize = 15)
plt.ylabel("$E_{st}/E_{bend}$", fontsize = 15)
plt.xticks([0,25,50,75,100], fontsize = 15)
plt.yticks(fontsize = 15)
plt.yscale('log')

#plt.title('Mean Dipole Moment = ' + mean_dip_moment_str, fontsize = 15)
plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)

plt.legend(loc = 'lower right')
plt.savefig(fname_plot+"en_ratio_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

plt.clf()
plt.close()

#***********************************************************************************************************************************************
# plotting the boundary forces
plt.figure(figsize=(8, 5), dpi=300)

plt.scatter(np.arange(0,np.shape(bndry_force)[0]), bndry_force, marker = '.', s = 500, c = colors, alpha=0.5)#, label = pbond_string)# Network 1')    

plt.xlabel("Simulation number", fontsize = 15)
plt.ylabel("Boundary F", fontsize = 15)
plt.xticks([0,25,50,75,100], fontsize = 15)
plt.yticks(fontsize = 15)
plt.yscale('log')

#plt.title('Mean Dipole Moment = ' + mean_dip_moment_str, fontsize = 15)
plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)

plt.legend(loc = 'lower right')
plt.savefig(fname_plot+"bndry_force_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

plt.clf()
plt.close()

#***********************************************************************************************************************************************
# making box plots and histograms for bending dominated cases only!!
#***********************************************************************************************************************************************

bndry_force = np.array(bndry_force)
# bending dominated cases are below
# bending_index = np.squeeze(np.where(en_ratio < 1))
bending_index = bend_dom              # index of bending dominated cases

# # not sure why this was here so removing it
# if hex_flag == 1:
#     bending_index = np.intersect1d(np.squeeze(np.where(ring_en_ratio < 1)), np.squeeze(np.where(bndry_force > 0)))

bending_dom_bndry_force = bndry_force[bending_index]
bending_dom_dip_moment = dip_moment[bending_index] 
bending_dom_dloc = loc_dip_moment[bending_index] 

bending_dom_en_tot = en_tot[bending_index]
bending_dom_en_elast = en_elast[bending_index]
bending_dom_en_bend = en_bend[bending_index]
bending_dom_en_ratio = en_ratio[bending_index]

mean_en_tot_bend = np.mean(bending_dom_en_tot)
std_en_tot_bend = np.std(bending_dom_en_tot)
median_en_tot_bend = np.median(bending_dom_en_tot)

mean_en_elast_bend = np.mean(bending_dom_en_elast)
std_en_elast_bend = np.std(bending_dom_en_elast)
median_en_elast_bend = np.median(bending_dom_en_elast)

mean_en_bend_bend = np.mean(bending_dom_en_bend)
std_en_bend_bend = np.std(bending_dom_en_bend)
median_en_bend_bend = np.median(bending_dom_en_bend)

mean_en_ratio_bend = np.mean(bending_dom_en_ratio)
std_en_ratio_bend = np.std(bending_dom_en_ratio)
median_en_ratio_bend = np.median(bending_dom_en_ratio)

# pval_inner = np.array(pval_inner)
# bending_pval_inner = pval_inner[bending_index]
# mean_bend_pval_inner = np.mean(bending_pval_inner)
# std_bend_pval_inner = np.std(bending_pval_inner)

bend_dom_coord_num = coord_num[bending_index]
bend_dom_pval_coord_num = pval_from_coord_num[bending_index]    # this val is calculated from coordination number
mean_coord_num = np.mean(bend_dom_coord_num)
std_coord_num = np.std(bend_dom_coord_num)

# writing mean coordination number to file
coord_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"bend_dom_coord_num_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    coord_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"bend_dom_coord_num_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    coord_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"all_dom_bend_dom_coord_num_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"

heading = '# dipoles       Mean z        std z'
fmt = '%12d', '%20.7e', '%20.7e'
np.savetxt(coord_outfname, np.column_stack((num_center, mean_coord_num, std_coord_num)), header = heading, fmt = fmt)
print('Mean z is saved to file: ', coord_outfname)


# this removes a very small outlier
# if num_center == 5 and srand == 112:
#     final_index = np.squeeze(np.where(bending_dom_bndry_force > 1e-7))
#     bending_dom_bndry_force = bending_dom_bndry_force[final_index]
#     bending_dom_dip_moment = bending_dom_dip_moment[final_index]

mean_bndry_force = np.mean(bending_dom_bndry_force)
std_bndry_force = np.std(bending_dom_bndry_force)
median_bndry_force = np.median(bending_dom_bndry_force)

mean_dip_moment_bend = np.mean(bending_dom_dip_moment)
std_dip_moment_bend = np.std(bending_dom_dip_moment)
median_dip_moment_bend = np.median(bending_dom_dip_moment)

# dloc means and std for ONLY bending cases
mean_dloc_bend = np.mean(bending_dom_dloc)
std_dloc_bend = np.std(bending_dom_dloc)
median_dloc_bend = np.median(bending_dom_dloc)

# inner stress means and std for ONLY bending cases
inner_stress = np.array(inner_stress)
bend_dom_inner_stress = inner_stress[bending_index]
mean_inner_stress_bend = np.mean(bend_dom_inner_stress)
std_inner_stress_bend = np.std(bend_dom_inner_stress)
median_inner_stress_bend = np.median(bend_dom_inner_stress)

# ring stresses for only bending dominated cases
ring_stress_bend_dom = ring_stress[bending_index,:,:]
mean_ring_stress = np.nanmean(ring_stress_bend_dom[:,:,1], axis = 0)
std_ring_stress = np.nanstd(ring_stress_bend_dom[:,:,1], axis = 0)/len(bending_index)    # this is the Standard error of mean


# finding the bending dominated displacement cases
disp_bend_dom = data_disp_all[bending_index,:,1]
mean_disp_bend_dom = np.nanmean(disp_bend_dom,axis=0)
std_disp_bend_dom = np.nanstd(disp_bend_dom,axis=0)
radius_bins = data_disp_all[0,:,0]

# scatter plot of coordination number
fig = plt.figure(figsize=(8, 4), dpi=300)
plt.scatter(np.arange(0,len(bending_index)), bend_dom_coord_num)
plt.axhline(np.mean(bend_dom_coord_num), color='k', linestyle='dotted', linewidth=1)
plt.xlabel('Simulations', fontsize = 15)
plt.ylabel('Coordination Number', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.title('Non dipole nodes')
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"coord_num_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# scatter plot of coordination number
fig = plt.figure(figsize=(8, 4), dpi=300)
plt.scatter(np.arange(0,len(bending_index)), bend_dom_pval_coord_num)
plt.axhline(np.mean(bend_dom_pval_coord_num), color='k', linestyle='dotted', linewidth=1)
plt.xlabel('Simulations', fontsize = 15)
plt.ylabel('$z/6$', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.title('Non dipole nodes')
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"pval_coord_num_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()


# histogram below of boundary force
fig = plt.figure(figsize=(8, 4), dpi=300)
n,bins,patches = plt.hist(bending_dom_bndry_force, bins = 10, histtype = 'step', alpha = 1.0)#, color='blue')#, label = "CG " + mean_pos_abhi_str)
binwidth = bins[1] - bins[0]
binwidth_str = "%.2e" % binwidth
#plt.xscale('log')
plt.axvline(mean_bndry_force, color='k', linestyle='dotted', linewidth=1)
plt.axvline(median_bndry_force, color='g', linestyle='dashed', linewidth=1)
#plt.title('Positive Strains')
#plt.legend()
plt.xlabel('Boundary Force', fontsize = 15)
plt.ylabel('Number of Realizations', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"b_force_hist_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+binwidth_str+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# histogram below of boundary force: cropped the outlier
fig = plt.figure(figsize=(8, 4), dpi=300)
n,bins,patches = plt.hist(bending_dom_bndry_force, bins = 10, histtype = 'step', alpha = 1.0)#, color='blue')#, label = "CG " + mean_pos_abhi_str)
binwidth = bins[1] - bins[0]
binwidth_str = "%.2e" % binwidth
#plt.xscale('log')
plt.axvline(mean_bndry_force, color='k', linestyle='dotted', linewidth=1)
plt.axvline(median_bndry_force, color='g', linestyle='dashed', linewidth=1)
#plt.title('Positive Strains')
#plt.legend()
if num_center == 5:
    plt.xlim([0,1e-4])
elif num_center == 10:
    plt.xlim([0,2e-4])
plt.xlabel('Boundary Force', fontsize = 15)
plt.ylabel('Number of Realizations', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"b_force_hist_cropped_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+binwidth_str+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# cumulative plots here
fig = plt.figure(figsize=(8, 4), dpi=300)
values, base_s = np.histogram(bending_dom_bndry_force, bins=100)
#evaluate the cumulative
cumulative = np.cumsum(values)
# plot the cumulative function
plt.plot(base_s[:-1], cumulative, c='blue')
plt.axvline(mean_bndry_force, color='k', linestyle='dotted', linewidth=1)
plt.axvline(median_bndry_force, color='g', linestyle='dashed', linewidth=1)
plt.xlabel('Boundary Force', fontsize = 15)
plt.ylabel('Number of Realizations', fontsize = 15)
#plt.xscale('log')
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"b_force_cumulative_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+binwidth_str+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()


# histogram below of dipole moment
fig = plt.figure(figsize=(8, 4), dpi=300)
n,bins,patches = plt.hist(bending_dom_dip_moment, bins = 20, histtype = 'step', alpha = 1.0)#, color='blue')#, label = "CG " + mean_pos_abhi_str)
binwidth = bins[1] - bins[0]
binwidth_str = "%.2e" % binwidth
plt.xscale('log')
plt.axvline(mean_dip_moment_bend, color='k', linestyle='dotted', linewidth=1)
plt.axvline(median_dip_moment_bend, color='g', linestyle='dashed', linewidth=1)
#plt.title('Positive Strains')
#plt.legend()
plt.xlabel('Dipole Moment', fontsize = 15)
plt.ylabel('Number of Realizations', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
# if srand == 112:
#     plt.xlim([5e-6,1e-1])
plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"dip_moment_hist_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(len(bins)-1)+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# scatter plot below of dipole moment
fig = plt.figure(figsize=(8, 4), dpi=300)
plt.scatter(np.arange(0,len(bending_dom_dip_moment)), bending_dom_dip_moment, c = 'b', alpha = 0.3)
plt.axhline(mean_dip_moment_bend, color='k', linestyle='dotted', linewidth=1)
plt.axhline(median_dip_moment_bend, color='g', linestyle='dashed', linewidth=1)
#plt.title('Positive Strains')
#plt.legend()
plt.xlabel('Network realization', fontsize = 15)
plt.ylabel('Dipole moment', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"dip_moment_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(len(bins)-1)+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# cumulative plot of dipole moment here
fig = plt.figure(figsize=(8, 4), dpi=300)
values, base_s = np.histogram(bending_dom_dip_moment, bins=100)
#evaluate the cumulative
cumulative = np.cumsum(values)
# plot the cumulative function
plt.plot(base_s[:-1], cumulative, c='blue')
plt.axvline(mean_dip_moment_bend, color='k', linestyle='dotted', linewidth=1)
plt.axvline(median_dip_moment_bend, color='g', linestyle='dashed', linewidth=1)
plt.xlabel('Dipole Moment', fontsize = 15)
plt.ylabel('Number of Realizations', fontsize = 15)
plt.xscale('log')
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"dip_moment_cumulative_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+binwidth_str+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()


# scatter plot of stress on rings
fig = plt.figure(figsize=(8, 4), dpi=300)
plt.errorbar(ring_stress[0,:,0], mean_ring_stress, yerr = std_ring_stress, ls = "None", fmt = 'o', ms = 10)
plt.xlabel('Radial Distance', fontsize = 15)
plt.ylabel('Radial Stress', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"mean_radial_stress_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# scatter plot of stress on outer rings
cutoff_radius = 14
cutoff_index = np.where(ring_stress[0,:,0] == cutoff_radius)[0][0]
outer_ring_xaxis = ring_stress[0,cutoff_index:,0]

xaxis_fit = np.linspace(outer_ring_xaxis[0],outer_ring_xaxis[-1],100)
y_fit = mean_ring_stress[cutoff_index]/np.power((xaxis_fit-(cutoff_radius-1)),2)

fig = plt.figure(figsize=(8, 4), dpi=300)
plt.errorbar(ring_stress[0,cutoff_index:,0], mean_ring_stress[cutoff_index:], yerr = std_ring_stress[cutoff_index:], ls = "None", fmt = 'o', ms = 10)
# plt.plot(xaxis_fit, y_fit, label = '$1/r^2$')
plt.xlabel('Radial Distance', fontsize = 15)
plt.ylabel('Radial Stress', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.legend(loc='best')
plt.savefig(fname_plot+"mean_radial_stress_outer_annulus_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# dropping last two data points that may not be too close to the boundary
from math import log10, floor
def find_exp_base(number):
    exp = floor(log10(abs(number)))
    return round(number/10**exp, 2), exp 

slope, intercept = np.polyfit(ring_stress[0,cutoff_index:-2,0],mean_ring_stress[cutoff_index:-2], 1)
base_num, exp = find_exp_base(slope)
label_txt = '$' + str(base_num) + '\\times 10^{'+ str(exp) + '}$' + ' $R + $' + r"$%0.2e$" % intercept
y_fit = slope*outer_ring_xaxis + intercept


fig = plt.figure(figsize=(8, 4), dpi=300)
plt.errorbar(ring_stress[0,cutoff_index:-2,0], mean_ring_stress[cutoff_index:-2], yerr = std_ring_stress[cutoff_index:-2], ls = "None", fmt = 'o', ms = 10)
plt.plot(outer_ring_xaxis, y_fit, label=label_txt)
# plt.plot(xaxis_fit, y_fit, label = '$1/r^2$')
plt.xlabel('Radial Distance', fontsize = 15)
plt.ylabel('Radial Stress', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.legend(loc='best')
plt.savefig(fname_plot+"mean_radial_stress_outer_annulus_cutoff_end_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# sigma_rr from theory (using measured sigma1)
sigma1 = mean_ring_stress[cutoff_index]
r = np.linspace(ring_stress[0,cutoff_index,0], ring_stress[0,-2,0],100)
outer_radius = 24
inner_radius = 13
const = (sigma1*inner_radius**2)/(2*((inner_radius**2*(np.sqrt(3)/2))  + (outer_radius**2*(np.sqrt(3)/4))))
sigma_rr_theory = -1*( (-2*(np.sqrt(3)/4)*const*(outer_radius**2)/r**2) - (2*(np.sqrt(3)/2)*const) )   # maybe sign error; multiplying by -1

# getting sigma1 as a fit parameter from the plot data (because mu_m cancels out)
from scipy.optimize import curve_fit
def func(x,sigma1_fit):
    sigma_rr_theory_fit = -1*(sigma1_fit)*((-outer_radius**2/(2*x**2))-1) * (inner_radius**2)/(inner_radius**2 + (1/2)*outer_radius**2)   # maybe sign error; multiplying by -1
    return sigma_rr_theory_fit

popt, pcov = curve_fit(func, ring_stress[0,cutoff_index+1:-2,0], mean_ring_stress[cutoff_index+1:-2], maxfev=10000)
# popt, pcov = curve_fit(func, ring_stress[0,cutoff_index:-2,0], mean_ring_stress[cutoff_index:-2], maxfev=10000)
sigma_rr_outer_fit = func(r, popt[0])

# writing the sigma1 to file
sigma1_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_sigma1_got_from_fit_to_radial_stress_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    sigma1_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_sigma1_got_from_fit_to_radial_stress_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    sigma1_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"all_dom_mean_sigma1_got_from_fit_to_radial_stress_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    
heading = '# dipoles       Sigma1 (got from fit to radial stress)'
fmt = '%12d', '%20.7e'
np.savetxt(sigma1_outfname, np.column_stack((num_center, popt[0])), header = heading, fmt = fmt)
print('Sigma1 obtained from fitting sigma_rr data is saved to file: ', sigma1_outfname)


# plotting the sigma_rr in outer annulus with the theory prediction from above
fig = plt.figure(figsize=(8, 4), dpi=300)
plt.errorbar(ring_stress[0,cutoff_index:-2,0], mean_ring_stress[cutoff_index:-2], yerr = std_ring_stress[cutoff_index:-2], ls = "None", fmt = 'o', ms = 10)
# plt.plot(r, sigma_rr_theory, label="$c_1/r^2 + c_2 $")
plt.plot(r, sigma_rr_outer_fit, label="fitted $\Sigma_1 = %0.2e $" % popt[0])
# plt.plot(xaxis_fit, y_fit, label = '$1/r^2$')
plt.xlabel('Radial Distance', fontsize = 15)
plt.ylabel('Radial Stress', fontsize = 15)
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.legend(loc='best')
plt.savefig(fname_plot+"mean_radial_stress_outer_annulus_cutoff_end_theory_line_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()


from matplotlib.ticker import FuncFormatter
# Define the formatter function
def scientific_format(x, pos):
    if x == 0:
        return "0"
    exponent = int(np.floor(np.log10(abs(x))))
    coefficient = x / 10**exponent
    return r"${:.1f} \times 10^{{{}}}$".format(coefficient, exponent)

# # for the pas presentation: temp storing some values $=# FOR APS !!!
from math import log10, floor
def find_exp_base(number):
    exp = floor(log10(abs(number)))
    return round(number/10**exp, 2), exp 

base_num, exp = find_exp_base(9.026437669900283e-08)
label1_txt = '$\\Sigma_{1} =' + str(base_num) + ' \\times 10^{'+ str(exp) + '}$'
base_num, exp = find_exp_base(1.5749315729762915e-07)
label2_txt = '$\\Sigma_{1} =' + str(base_num) + ' \\times 10^{'+ str(exp) + '}$'
base_num, exp = find_exp_base(2.721051059453136e-07)
label3_txt = '$\\Sigma_{1} =' + str(base_num) + ' \\times 10^{'+ str(exp) + '}$'


# # plotting radial stress vs radial distance for n_d = 5, 10, 15
# fig = plt.figure(figsize=(8, 6), dpi=300)
# plt.errorbar(ring_stress[0,cutoff_index:-2,0], stress_fit5, yerr = yerr5, ls = "None", fmt = 'o', ms = 10, label = '$N_d = 5$')
# plt.errorbar(ring_stress[0,cutoff_index:-2,0], stress_fit10, yerr = yerr10, ls = "None", fmt = 'o', ms = 10, label = '$N_d = 10$')
# plt.errorbar(ring_stress[0,cutoff_index:-2,0], stress_fit15, yerr = yerr15, ls = "None", fmt = 'o', ms = 10, label = '$N_d = 15$')
# plt.plot(r, y5fit_cont, label=label1_txt)
# plt.plot(r, y10fit_cont, label=label2_txt)
# plt.plot(r, y15fit_cont, label=label3_txt)
# plt.xlabel('Radial Distance', fontsize = 20)
# plt.ylabel('Radial Stress', fontsize = 20)
# plt.xticks(fontsize = 20)
# plt.ticklabel_format(axis='y', style='sci', scilimits=(0,0))
# plt.yticks([0.5e-7,1e-7,1.5e-7,2e-7,2.5e-7, 3e-7], fontsize = 20)
# formatter = FuncFormatter(scientific_format)
# plt.gca().yaxis.set_major_formatter(formatter)
# plt.subplots_adjust(top=0.94, left = 0.25, bottom = 0.12, right = 0.98)
# plt.legend(loc='best', fontsize = 15)
# plt.savefig(fname_plot+"mean_radial_stress_outer_annulus_cutoff_end_theory_line_5_10_15_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
# plt.close()
# plt.clf()



pow_val = 0.8
square_slope = 5e-5/np.power(outer_ring_xaxis, pow_val)
cube_slope = 5e-5/np.power((outer_ring_xaxis-(cutoff_radius-1)), 5)
fig = plt.figure(figsize=(8, 4), dpi=300)
plt.errorbar(ring_stress[0,cutoff_index:-2,0], mean_ring_stress[cutoff_index:-2], yerr = std_ring_stress[cutoff_index:-2], ls = "None", fmt = 'o', ms = 10)
plt.plot(outer_ring_xaxis, square_slope, label='$1/r^{%0.2f}$' % pow_val)
# plt.plot(outer_ring_xaxis, cube_slope, label='$1/r^{%0.2f}$' % pow_val)
# plt.plot(xaxis_fit, y_fit, label = '$1/r^2$')
plt.xlabel('Radial Distance', fontsize = 15)
plt.ylabel('Radial Stress', fontsize = 15)
plt.yscale('log')
plt.xscale('log')
plt.xticks(fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.legend(loc='best')
plt.savefig(fname_plot+"mean_radial_stress_outer_annulus_cutoff_end_log_log_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()


# plotting emperical CDF below::
import statsmodels.api as sm
# ecdf = sm.distributions.ECDF(bending_dom_dip_moment)
# x = np.linspace(min(bending_dom_dip_moment), max(bending_dom_dip_moment))
# y = ecdf(x)

# fig = plt.figure(figsize=(8, 4), dpi=300)
# plt.step(x, y)
# plt.xlabel('Dipole Moment', fontsize = 15)
# plt.ylabel('Frequency', fontsize = 15)
# #plt.xscale('log')
# plt.xticks(fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
# plt.savefig(fname_plot+"dip_moment_emperical_cumulative_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+binwidth_str+"_"+str(num-1)+".png")  # just plotting the last step data
# plt.close()
# plt.clf()

#***********************************************************************************************************************************************
# writing mean and standard deviation for all simulations to file

#***********************************************************************************************************************************************
# writing the dfar stuff
force_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_dip_mom_bndry_force_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    force_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_dip_mom_bndry_force_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    force_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"all_dom_mean_dip_mom_bndry_force_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"

# print('here all individual forces on BOUNDARY nodes are written to file : ',force_outfname)    
heading = '# simulations       Mean Dip Mom           Std Dip Mom         Mean Bndry F         Std Bndry F          Mean Dloc           Std Dloc'
fmt = '%12d', '%20.7e', '%20.7e', '%20.7e', '%20.7e', '%20.7e', '%20.7e'
np.savetxt(force_outfname, np.column_stack((len(bending_dom_bndry_force), mean_dip_moment_bend, std_dip_moment_bend, mean_bndry_force, std_bndry_force, mean_dloc_bend, std_dloc_bend )), header = heading, fmt = fmt)
print('Mean dpiole moment and boundary force saved to file: ', force_outfname)

# writing the energy stuff
mean_en_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_en_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    mean_en_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_en_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    mean_en_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"all_dom_mean_en_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"

    
heading = '# simulations     Mean Elastic EN      Std Elastic EN       Mean Bend EN         Std Bend EN          Mean EN ratio         Std EN ratio'
fmt = '%12d', '%20.7e', '%20.7e', '%20.7e', '%20.7e', '%20.7e', '%20.7e'
np.savetxt(mean_en_outfname, np.column_stack((len(bending_dom_en_ratio), mean_en_elast_bend, std_en_elast_bend, mean_en_bend_bend, std_en_bend_bend, mean_en_ratio_bend, std_en_ratio_bend )), header = heading, fmt = fmt)
print('Mean energies saved to file: ', mean_en_outfname)

# # writing the pval_inner stuff
# mean_pval_inner_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_pval_inner_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
# heading = '# simulations        Mean p               Std p'
# fmt = '%12d', '%20.5e', '%20.5e'
# np.savetxt(mean_pval_inner_outfname, np.column_stack((len(bending_pval_inner), mean_bend_pval_inner, std_bend_pval_inner)), header = heading, fmt = fmt)
# print('Mean pval_inners saved to file: ', mean_pval_inner_outfname)

# writing the bending dominated inner cases to file
mean_inner_stress_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_bend_dom_inner_stress_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    mean_inner_stress_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_bend_dom_inner_stress_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    mean_inner_stress_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"all_dom_mean_bend_dom_inner_stress_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    
heading = '# simulations        Mean Sigma1            Std Sigma1             Median Sigma1'
fmt = '%12d', '%20.5e', '%20.5e', '%20.5e'
np.savetxt(mean_inner_stress_outfname, np.column_stack((len(bend_dom_inner_stress), mean_inner_stress_bend, std_inner_stress_bend, median_inner_stress_bend)), header = heading, fmt = fmt)
print('Mean inners stress for bending dominated cases *only*, saved to file: ', mean_inner_stress_outfname)

# writing the bending dominated ring stress cases to file
mean_ring_stress_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_ring_stress_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    mean_ring_stress_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"mean_ring_stress_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    mean_ring_stress_outfname = base+fout_folder + kappa_fname +ranseed+"/"+str(srand)+"/means/"+"all_dom_mean_ring_stress_"+str(L)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    
heading = 'Ring Radius            Mean Stress          SEM stress'
fmt = '%12.2f', '%20.5e', '%20.5e'
np.savetxt(mean_ring_stress_outfname, np.column_stack((ring_stress[0,:,0], mean_ring_stress, std_ring_stress)), header = heading, fmt = fmt)
print('Mean inners stress for bending dominated cases *only*, saved to file: ', mean_ring_stress_outfname)

# writing the bending dominated displacements in rings to file
disp_mean_outfname = base+fout_folder + kappa_fname + ranseed+"/" + str(srand) + "/means/" + "bndry_node_radial_disp_mean_"+str(srand)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if L != 64:
    disp_mean_outfname = base+fout_folder + kappa_fname + ranseed+"/" + str(srand) + "/means/" + "bndry_node_radial_disp_mean_"+str(L)+"_"+str(srand)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
if bending_flag == 0:
    disp_mean_outfname = base+fout_folder + kappa_fname + ranseed+"/" + str(srand) + "/means/" + "all_dom_bndry_node_radial_disp_mean_"+str(L)+"_"+str(srand)+"_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+tol_str+"_"+kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+"_"+str(num-1)+".txt"
    
print('here all mean (after binning) radial displacements on all nodes are written to file : ',disp_mean_outfname)    
heading = 'bin mid       Mean Radial dist        Meadian Radial dist        Std Radial dist'
fmt = '%10.2f', '%15.7e', '%15.7e'
np.savetxt(disp_mean_outfname, np.column_stack((radius_bins, mean_disp_bend_dom, std_disp_bend_dom)), header = heading, fmt = fmt)
#***********************************************************************************************************************************************



#***********************************************************************************************************************************************
# plotting energy ratio versus dipole moment
#***********************************************************************************************************************************************
if len(bending_dom_en_ratio) > 1:
    plt.figure(figsize=(8, 5), dpi=300)
    plt.scatter(bending_dom_en_ratio, bending_dom_dip_moment, marker = '.', s = 500, c = 'b', alpha=0.5)#, label = pbond_string)# Network 1')    
    plt.xlabel("$E_{st}/E_{bend}$", fontsize = 15)
    plt.ylabel("Dipole Moment", fontsize = 15)
    plt.xticks(fontsize = 15)
    plt.yticks(fontsize = 15)
    plt.xscale('log')
    plt.yscale('log')
    plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
    plt.legend(loc = 'best')
    plt.savefig(fname_plot+"dip_mom_vs_en_ratio_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")
    plt.clf()
    plt.close()


#***********************************************************************************************************************************************
# making D_far and D_loc plots and histograms for bending dominated cases
# also are below the box plots for boundary forces
#***********************************************************************************************************************************************
'''
bend_d_far = far_dip_moment[bending_index]
bend_d_loc = loc_dip_moment[bending_index]
bend_ratio_d_far_d_loc = ratio_dip_moment[bending_index]

# stretching cases
stretch_d_far = far_dip_moment[stretch_dom]
stretch_d_loc = loc_dip_moment[stretch_dom]
stretch_ratio_d_far_d_loc = ratio_dip_moment[stretch_dom]

# mean_bend_d_far = np.mean(bend_d_far)
# median_bend_d_far = np.median(bend_d_far)
# std_bend_d_far = np.std(bend_d_far)
# mean_bend_d_ratio = np.mean(bend_ratio_d_far_d_loc)
# median_bend_d_ratio = np.median(bend_ratio_d_far_d_loc)
# std_bend_d_ratio = np.std(bend_ratio_d_far_d_loc)

# box plot below
if num_center == 5:
    bending_dom_bndry_force_5 = bending_dom_bndry_force
    bend_d_far_5 = bend_d_far
    bend_d_loc_5 = bend_d_loc
    bend_d_ratio_5 = bend_ratio_d_far_d_loc
    # mean_bend_d_far_5 = mean_bend_d_far
    # median_bend_d_far_5 = median_bend_d_far
    # std_bend_d_far_5 = std_bend_d_far
    # mean_bend_d_ratio_5 = mean_bend_d_ratio
    # median_bend_d_ratio_5 = median_bend_d_ratio
    # std_bend_d_ratio_5 = std_bend_d_ratio

elif num_center == 10:
    bending_dom_bndry_force_10 = bending_dom_bndry_force
    bend_d_far_10 = bend_d_far
    bend_d_loc_10 = bend_d_loc
    bend_d_ratio_10 = bend_ratio_d_far_d_loc
    # mean_bend_d_far_10 = mean_bend_d_far
    # median_bend_d_far_10 = median_bend_d_far
    # std_bend_d_far_10 = std_bend_d_far
    # mean_bend_d_ratio_10 = mean_bend_d_ratio
    # median_bend_d_ratio_10 = median_bend_d_ratio
    # std_bend_d_ratio_10 = std_bend_d_ratio

elif num_center == 15:
    bending_dom_bndry_force_15 = bending_dom_bndry_force
    bend_d_far_15 = bend_d_far
    bend_d_loc_15 = bend_d_loc
    bend_d_ratio_15 = bend_ratio_d_far_d_loc
    # mean_bend_d_far_15 = mean_bend_d_far
    # median_bend_d_far_15 = median_bend_d_far
    # std_bend_d_far_15 = std_bend_d_far
    # mean_bend_d_ratio_15 = mean_bend_d_ratio
    # median_bend_d_ratio_15 = median_bend_d_ratio
    # std_bend_d_ratio_15 = std_bend_d_ratio

elif num_center == 20:
    bending_dom_bndry_force_20 = bending_dom_bndry_force
    bend_d_far_20 = bend_d_far
    bend_d_loc_20 = bend_d_loc
    bend_d_ratio_20 = bend_ratio_d_far_d_loc
    # mean_bend_d_far_20 = mean_bend_d_far
    # median_bend_d_far_20 = median_bend_d_far
    # std_bend_d_far_20 = std_bend_d_far
    # mean_bend_d_ratio_20 = mean_bend_d_ratio
    # median_bend_d_ratio_20 = median_bend_d_ratio
    # std_bend_d_ratio_20 = std_bend_d_ratio

all_bndry_forces = [bending_dom_bndry_force_5, bending_dom_bndry_force_10, bending_dom_bndry_force_15]
all_bend_d_far = [bend_d_far_5, bend_d_far_10, bend_d_far_15]
all_bend_d_loc = [bend_d_loc_5, bend_d_loc_10, bend_d_loc_15]
all_bend_d_ratio = [bend_d_ratio_5, bend_d_ratio_10, bend_d_ratio_15]

# all_bndry_forces = [bending_dom_bndry_force_5, bending_dom_bndry_force_10, bending_dom_bndry_force_15, bending_dom_bndry_force_20]
# all_bend_d_far = [bend_d_far_5, bend_d_far_10, bend_d_far_15, bend_d_far_20]
# all_bend_d_loc = [bend_d_loc_5, bend_d_loc_10, bend_d_loc_15, bend_d_loc_20]
# all_bend_d_ratio = [bend_d_ratio_5, bend_d_ratio_10, bend_d_ratio_15, bend_d_ratio_20]

# box plot for boundary forces
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
plt.boxplot(all_bndry_forces)
plt.yscale('log')
#plt.axvline(mean_bndry_force, color='k', linestyle='dotted', linewidth=1)
#plt.axvline(median_bndry_force, color='g', linestyle='dashed', linewidth=1)
#plt.title('Positive Strains')
#plt.legend()
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('Boundary Force', fontsize = 15)
plt.xticks([1,2,3], [5, 10, 15], fontsize = 15)
# plt.xticks([1,2,3,4], [5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.12, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"b_force_box_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# box plot for d_far dipole moment at the boundary
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
plt.boxplot(all_bend_d_far)
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('$D_{far}$', fontsize = 15)
plt.xticks([1,2,3], [5, 10, 15], fontsize = 15)
# plt.xticks([1,2,3,4], [5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.13, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_far_box_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# zoomed in box plot d_far
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
plt.boxplot(all_bend_d_far)
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('$D_{far}$', fontsize = 15)
plt.xticks([1,2,3], [5, 10, 15], fontsize = 15)
# plt.xticks([5, 10, 15], fontsize = 15)
# xaxis = np.linspace(5,15,100)
# y_fit = xaxis*np.mean(all_bend_d_far[0])
# plt.plot(xaxis,y_fit)
# plt.xticks([1,2,3,4], [5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
# plt.ylim([0,5e-3])
plt.ylim([0,2e-3])
plt.subplots_adjust(top=0.92, left = 0.13, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_far_zoom_box_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# box plot for d_far/d_loc ratio
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
plt.boxplot(all_bend_d_ratio)
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('$D_{far}$/$D_{loc}$', fontsize = 15)
plt.xticks([1,2,3], [5, 10, 15], fontsize = 15)
# plt.xticks([1,2,3,4], [5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.13, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_ratio_box_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# zoomed in box plot for d_far/d_loc ratio
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
plt.boxplot(all_bend_d_ratio)
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('$D_{far}$/$D_{loc}$', fontsize = 15)
plt.xticks([1,2,3], [5, 10, 15], fontsize = 15)
# plt.xticks([1,2,3,4], [5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
plt.ylim([0,1e-3])
# plt.ylim([0,2e-3])
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_ratio_zoom_box_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# plotting the mean with error
mean_bend_d_far = []
mean_bend_d_ratio = []
median_bend_d_far = []
median_bend_d_ratio = []
std_bend_d_far = []
std_bend_d_ratio = []

mean_bend_d_loc = []
std_bend_d_loc = []


for i in range(0,len(all_bend_d_far)):
    mean_bend_d_far.append(np.mean(all_bend_d_far[i]))
    mean_bend_d_ratio.append(np.mean(all_bend_d_ratio[i]))
    median_bend_d_far.append(np.median(all_bend_d_far[i]))
    median_bend_d_ratio.append(np.median(all_bend_d_ratio[i]))
    std_bend_d_far.append(np.std(all_bend_d_far[i]))
    std_bend_d_ratio.append(np.std(all_bend_d_ratio[i]))

    mean_bend_d_loc.append(np.mean(all_bend_d_loc[i]))
    std_bend_d_loc.append(np.std(all_bend_d_loc[i]))

# mean plot for d_loc
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
# xlabels = [5, 10, 15, 20]
plt.errorbar(xlabels, mean_bend_d_loc, yerr = std_bend_d_loc, fmt = 'o')
xaxis = np.linspace(5, 15, 100)

# yfit1 = mean_bend_d_loc[0]*xaxis/xaxis[0]
# yfit2 = d_loc_p1[0]*xaxis
# plt.plot(xaxis,yfit1, label='d_loc for p = 0.55')
# plt.plot(xaxis,yfit2, label='d_loc for p = 1')

plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('$<D_{loc}>$', fontsize = 15)
# plt.xticks([1,2,3,4], [5, 10, 15, 20], fontsize = 15)
# plt.xticks([1,2,3], [5, 10, 15], fontsize = 15)
plt.xticks([5, 10, 15], fontsize = 15)
plt.yticks(fontsize = 15)
plt.legend()
plt.subplots_adjust(top=0.92, left = 0.13, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_loc_mean_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()


# mean plot for d_far
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
# xlabels = [5, 10, 15, 20]
plt.errorbar(xlabels, mean_bend_d_far, yerr = std_bend_d_far, fmt = 'o')
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('$<D_{far}>$', fontsize = 15)
# plt.xticks([1,2,3,4], [5, 10, 15, 20], fontsize = 15)
# plt.xticks([1,2,3], [5, 10, 15], fontsize = 15)
plt.xticks([5, 10, 15], fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.15, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_far_mean_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# median plot for d_far 
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
# xlabels = [5, 10, 15, 20]
# plt.errorbar(xlabels, median_bend_d_ratio, yerr = std_bend_d_ratio)
plt.scatter(xlabels, median_bend_d_far)
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('Median $D_{far}$', fontsize = 15)
plt.xticks([5, 10, 15], fontsize = 15)
# plt.xticks([5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.13, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_far_median_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# mean plot for d_far/d_loc ratio
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
# xlabels = [5, 10, 15, 20]
plt.errorbar(xlabels, mean_bend_d_ratio, yerr = std_bend_d_ratio, fmt = 'o')
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('$<D_{far}$/$D_{loc}>$', fontsize = 15)
plt.xticks([5, 10, 15], fontsize = 15)
# plt.xticks([5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.13, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_ratio_mean_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# median plot for d_far/d_loc ratio
fig = plt.figure(figsize=(8, 4), dpi=300)
xlabels = [5, 10, 15]
# xlabels = [5, 10, 15, 20]
# plt.errorbar(xlabels, median_bend_d_ratio, yerr = std_bend_d_ratio)
plt.scatter(xlabels, median_bend_d_ratio)
plt.xlabel('Number of Dipoles', fontsize = 15)
plt.ylabel('Median $D_{far}$/$D_{loc}$', fontsize = 15)
plt.xticks([5, 10, 15], fontsize = 15)
# plt.xticks([5, 10, 15, 20], fontsize = 15)
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_ratio_median_plot_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()

# histogram of d-far/d-loc ratio
fig = plt.figure(figsize=(8, 4), dpi=300)
n,bins,patches = plt.hist(all_bend_d_ratio[1], bins = 100, histtype = 'step', alpha = 1.0)#, color='blue')#, label = "CG " + mean_pos_abhi_str)
plt.xlabel('$D_{far}$/$D_{loc}$', fontsize = 15)
plt.ylabel('Number of Realizations$', fontsize = 15)
#plt.xticks([5, 10, 15, 20], fontsize = 15)
plt.xlim([0,0.001])
plt.yticks(fontsize = 15)
plt.subplots_adjust(top=0.92, left = 0.14, bottom = 0.15, right = 0.96)
plt.savefig(fname_plot+"d_ratio_hist_plot_"+str(10)+"_dipoles_"+str(num_dip)+"_"+pbond_string+"_"+mu_str+"_"+mu_c_str+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+str(num-1)+".png")  # just plotting the last step data
plt.close()
plt.clf()




'''


#***********************************************************************************************************************************************
# making boundary force histograms for bending dominated cases
#***********************************************************************************************************************************************
# plt.figure(figsize=(8, 5), dpi=300)

# plt.scatter(np.arange(0,np.shape(bndry_force)[0]), bndry_force, marker = '.', s = 500, c = colors, alpha=0.5)#, label = pbond_string)# Network 1')    

# plt.xlabel("Simulation number", fontsize = 15)
# plt.ylabel("Boundary F", fontsize = 15)
# plt.xticks([0,25,50,75,100], fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.yscale('log')

# #plt.title('Mean Dipole Moment = ' + mean_dip_moment_str, fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)

# plt.legend(loc = 'lower right')
# plt.savefig(fname_plot+"bndry_force_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+pbond_string+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# plt.clf()
# plt.close()

#***********************************************************************************************************************************************
#***********************************************************************************************************************************************
#***********************************************************************************************************************************************
#***********************************************************************************************************************************************
#***********************************************************************************************************************************************
#***********************************************************************************************************************************************













#***********************************************************************************************************************************************
# dipole moment slopes for p < 1
#***********************************************************************************************************************************************
# num_c = [1,2,3,4,5]
# num_c = np.array(num_c)

# if L != 64:
#     num_c = np.array([1,5,20])

# pbond_string90 = "%.2f" % 0.9 # to write the filename
# pbond_string80 = "%.2f" % 0.8 # to write the filename
# pbond_string70 = "%.2f" % 0.7 # to write the filename
# pbond_string75 = "%.2f" % 0.75 # to write the filename

# # for seeds 112, 667720,601210, and 111111,101111
# if srand == 112:
#     fname_plot = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6/667720,601210/112/111111,101111/png/strain_hist/'
#     fname_base  = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6/667720,601210/112/111111,101111/txt/area/'
#     # for randomly removed hex bonds
#     # fname_plot = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6-dip_bond_rand_remove/667720,601210/112/111111,101111/png/strain_hist/'
#     # fname_base  = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6-dip_bond_rand_remove/667720,601210/112/111111,101111/txt/area/'
#     # for only radial bonds
#     if radial_only_flag == 1:
#         fname_plot = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_only_radial_arp/kappa2_e-6/667720,601210/112/111111,101111/png/strain_hist/'
#         fname_base  = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_only_radial_arp/kappa2_e-6/667720,601210/112/111111,101111/txt/area/'


# # d_far_ratio_p70 = [2.1956345e-01, 3.9359555e-01, 4.5670517e-01, 3.9015712e-01, 3.2770307e-01]
# # d_far_ratio_p70 = np.array(d_far_ratio_p70)
# # d_far_p70 = [1.2571552e-01, 4.3071229e-01, 7.4750373e-01, 8.5051121e-01, 8.9194715e-01]
# # d_far_p70 = np.array(d_far_p70)
# # d_loc_p70 = np.array([5.7257032e-01, 1.0943017e+00, 1.6367315e+00, 2.1799197e+00, 2.7218151e+00])
# # d_loc_p70_th = np.array([d_loc_p70[0]*x for x in num_c])
# # diff_d_loc_p70 = d_loc_p70 - d_loc_p70_th


# # d_far_ratio_p60 = [1.3378052e-04, 5.2073110e-04, 3.7965891e-04, 3.3481649e-04, 2.8950010e-04]
# # d_far_ratio_p60 = np.array(d_far_ratio_p60)
# # d_far_p60 = [7.2241700e-05, 5.6239667e-04, 6.1505284e-04, 7.2321075e-04, 7.8165682e-04]
# # d_far_p60 = np.array(d_far_p60)
# # d_loc_p60 = np.array([5.4000165e-01, 1.0800136e+00, 1.6200142e+00, 2.1600213e+00, 2.7000226e+00])
# # d_loc_p60_th = np.array([d_loc_p60[0]*x for x in num_c])
# # diff_d_loc_p60 = d_loc_p60 - d_loc_p60_th


# # for seeds 113, 667720,601210, and 111111,101111
# if srand == 113:
#     fname_plot = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6/667720,601210/113/111111,101111/png/strain_hist/'
#     fname_base  = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6/667720,601210/113/111111,101111/txt/area/'

# # for seeds 114, 667720,601210, and 111111,101111
# if srand == 114:
#     fname_plot = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6/667720,601210/114/111111,101111/png/strain_hist/'
#     fname_base  = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6/667720,601210/114/111111,101111/txt/area/'

# if L != 64:
#     fname_plot = fname_plot + str(L)+'_'

# d_far_p70 = []
# d_loc_p70 = []
# d_far_ratio_p70 = []
# d_far_p75 = []
# d_loc_p75 = []
# d_far_ratio_p75 = []
# d_far_p80 = []
# d_loc_p80 = []
# d_far_ratio_p80 = []
# d_far_p90 = []
# d_loc_p90 = []
# d_far_ratio_p90 = []

# for i in range(0,len(num_c)):
#     fname_p90 = fname_base + 'dipole_moment_ratio_'+str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string90+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#     fname_p80 = fname_base + 'dipole_moment_ratio_'+str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string80+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#     # fname_p70 = fname_base + 'dipole_moment_ratio_'+str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string70+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#     fname_p75 = fname_base + 'dipole_moment_ratio_'+str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string75+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'

#     # if srand_flag == 1 and L == 64 :
#     #     fname_p90 = fname_base + 'dipole_moment_ratio_'+ 'srand_'+ str(srand) + "_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string90+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#     #     fname_p80 = fname_base + 'dipole_moment_ratio_'+ 'srand_'+ str(srand) +"_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string80+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#     #     fname_p70 = fname_base + 'dipole_moment_ratio_'+ 'srand_'+ str(srand) +"_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string70+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#     #     fname_p75 = fname_base + 'dipole_moment_ratio_'+ 'srand_'+ str(srand) +"_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string75+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'

#     if srand_flag == 1 and L != 64 :
#         fname_p90 = fname_base + 'dipole_moment_ratio_' + str(L) +"_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string90+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#         fname_p80 = fname_base + 'dipole_moment_ratio_' + str(L) +"_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string80+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#         fname_p70 = fname_base + 'dipole_moment_ratio_' + str(L) +"_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string70+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'
#         # fname_p75 = fname_base + 'dipole_moment_ratio_'+ 'srand_'+ str(srand) +"_" + str(L) +"_" +str(num_c[i])+'_'+str(num_c[i]*6)+'_'+pbond_string75+ "_"+tol_str+"_"+ kappa_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+'_10.txt'

#     print('Fname p90: ',fname_p90)
#     print('Fname p80: ',fname_p80)
#     print('Fname p75: ',fname_p75)
#     # print('Fname p70: ',fname_p70)

#     data_temp = np.loadtxt(fname_p90)
#     d_far_p90.append(data_temp[2])
#     d_loc_p90.append(data_temp[1])
#     d_far_ratio_p90.append(data_temp[3])
#     data_temp = np.loadtxt(fname_p80)
#     d_far_p80.append(data_temp[2])
#     d_loc_p80.append(data_temp[1])
#     d_far_ratio_p80.append(data_temp[3])
#     data_temp = np.loadtxt(fname_p70)
#     d_far_p70.append(data_temp[2])
#     d_loc_p70.append(data_temp[1])
#     d_far_ratio_p70.append(data_temp[3])

#     # data_temp = np.loadtxt(fname_p75)
#     # d_far_p75.append(data_temp[2])
#     # d_loc_p75.append(data_temp[1])
#     # d_far_ratio_p75.append(data_temp[3])

# d_far_p70 = np.array(d_far_p70)
# d_loc_p70 = np.array(d_loc_p70)
# d_far_ratio_p70 = np.array(d_far_ratio_p70)
# # d_far_p75 = np.array(d_far_p75)
# # d_loc_p75 = np.array(d_loc_p75)
# # d_far_ratio_p75 = np.array(d_far_ratio_p75)
# d_far_p80 = np.array(d_far_p80)
# d_loc_p80 = np.array(d_loc_p80)
# d_far_ratio_p80 = np.array(d_far_ratio_p80)
# d_far_p90 = np.array(d_far_p90)
# d_loc_p90 = np.array(d_loc_p90)
# d_far_ratio_p90 = np.array(d_far_ratio_p90)

# # d_far_ratio_p70 = [5.7252399e-01, 7.6706925e-01, 6.3161407e-01, 5.8954537e-01, 6.4009310e-01]
# # d_far_ratio_p70 = np.array(d_far_ratio_p70)
# # d_far_p70 = [3.1351202e-01, 8.3596485e-01, 1.0315212e+00, 1.2862948e+00, 1.7459130e+00]
# # d_far_p70 = np.array(d_far_p70)
# # d_loc_p70 = np.array([5.4759629e-01, 1.0898167e+00, 1.6331511e+00, 2.1818419e+00, 2.7275923e+00])

# d_loc_p70_th = np.array([d_loc_p70[0]*x for x in num_c])
# diff_d_loc_p70 = d_loc_p70 - d_loc_p70_th

# # d_far_ratio_p80 = [1.3166133e+00, 1.3892356e+00, 1.4053231e+00, 1.4127611e+00, 1.4144318e+00]
# # d_far_ratio_p80 = np.array(d_far_ratio_p80)
# # d_far_p80 = [7.3208801e-01, 1.5382246e+00, 2.3335233e+00, 3.1260253e+00, 3.9147244e+00]
# # d_far_p80 = np.array(d_far_p80)
# # d_loc_p80 = np.array([5.5603874e-01, 1.1072453e+00, 1.6604888e+00, 2.2127062e+00, 2.7677012e+00])
# d_loc_p80_th = np.array([d_loc_p80[0]*x for x in num_c])
# diff_d_loc_p80 = d_loc_p80 - d_loc_p80_th
# # d_far_ratio_p90 = [1.5907814e+00, 1.7488938e+00, 1.6557821e+00, 1.6445565e+00, 1.6978734e+00]
# # d_far_ratio_p90 = np.array(d_far_ratio_p90)
# # d_far_p90 = [8.8937628e-01, 1.9480163e+00, 2.7694401e+00, 3.6681901e+00, 4.7341299e+00]
# # d_far_p90 = np.array(d_far_p90)
# # d_loc_p90 = np.array([5.5908138e-01, 1.1138563e+00, 1.6725874e+00, 2.2305042e+00, 2.7882702e+00])
# d_loc_p90_th = np.array([d_loc_p90[0]*x for x in num_c])
# diff_d_loc_p90 = d_loc_p90 - d_loc_p90_th

# # d_loc_p75_th = np.array([d_loc_p75[0]*x for x in num_c])
# # diff_d_loc_p75 = d_loc_p75 - d_loc_p75_th


# # for seeds 114, 667720,601210, and 111111,101111
# # fname_plot = '/home/abhinav/david/lattice_nopbd_bndry_all_clamp_restlength_circle_inner_fixed_radial_arp/kappa2_e-6/667720,601210/114/111111,101111/png/strain_hist/'
# # d_far_ratio_p70 = [5.7252399e-01, 5.4745939e-01, 5.8594672e-01, 5.9170137e-01, 4.8351005e-01]
# # d_far_ratio_p70 = np.array(d_far_ratio_p70)
# # d_far_p70 = [3.1351202e-01, 5.9604081e-01, 9.5623589e-01, 1.2876278e+00, 1.3135500e+00]
# # d_far_p70 = np.array(d_far_p70)
# # d_loc_p70 = np.array([5.4759629e-01, 1.0887398e+00, 1.6319502e+00, 2.1761447e+00, 2.7166963e+00])
# # d_loc_p70_th = np.array([d_loc_p70[0]*x for x in num_c])
# # diff_d_loc_p70 = d_loc_p70 - d_loc_p70_th



# #********************************************************************************************************************
# # plt.figure(figsize=(8, 5), dpi=300)
# # plt.scatter(num_c, d_far_ratio_p60, marker = '.', s = 500, alpha=0.5, label = 'p = 0.6')# Network 1')    
# # # plt.ylim([1.6,1.7])
# # plt.xlabel("Number of Dipoles", fontsize = 15)
# # plt.ylabel("$D_{far}$/$D_{loc}$", fontsize = 15)
# # plt.yticks(fontsize = 15)
# # plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# # plt.legend(loc = 'lower right')
# # plt.savefig(fname_plot+"dip_moment_ratio_scatter_p60_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# # plt.clf()
# # plt.close()

# plt.figure(figsize=(8, 5), dpi=300)
# plt.scatter(num_c, d_far_ratio_p70, marker = '.', s = 500, alpha=0.5, label = 'p = 0.7')# Network 1')    
# plt.scatter(num_c, d_far_ratio_p80, marker = '.', s = 500, alpha=0.5, label = 'p = 0.8')# Network 1')    
# plt.scatter(num_c, d_far_ratio_p90, marker = '.', s = 500, alpha=0.5, label = 'p = 0.9')# Network 1')    
# plt.scatter(num_c, d_ratio_p1, marker = '.', s = 500, alpha=0.5, label = 'p = 1')# Network 1')    
# # plt.ylim([1.6,1.7])
# plt.xlabel("Number of Dipoles", fontsize = 15)
# plt.ylabel("$D_{far}$/$D_{loc}$", fontsize = 15)
# if L == 64:
#     plt.xlim([0.7,6])
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# plt.legend(loc = 'lower right')
# plt.savefig(fname_plot+"dip_moment_ratio_scatter_p70_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# plt.clf()
# plt.close()

# # plt.figure(figsize=(8, 5), dpi=300)
# # plt.scatter(num_c, d_far_p60, marker = '.', s = 500, alpha=0.5, label = 'p = 0.6')# Network 1')    
# # # plt.ylim([1.6,1.7])
# # plt.xlabel("Number of Dipoles", fontsize = 15)
# # plt.ylabel("$D_{far}$", fontsize = 15)
# # plt.yticks(fontsize = 15)
# # plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# # plt.legend(loc = 'lower right')
# # plt.savefig(fname_plot+"dip_moment_scatter_p60_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# # plt.clf()
# # plt.close()

# # plt.figure(figsize=(8, 5), dpi=300)
# # plt.scatter(num_c, d_loc_p60, marker = '.', s = 500, alpha=0.5, label = 'p = 0.6')# Network 1')    
# # # plt.ylim([1.6,1.7])
# # plt.xlabel("Number of Dipoles", fontsize = 15)
# # plt.ylabel("$D_{loc}$", fontsize = 15)
# # plt.yticks(fontsize = 15)
# # plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# # plt.legend(loc = 'lower right')
# # plt.savefig(fname_plot+"dip_moment_loc_scatter_p60_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# # plt.clf()
# # plt.close()


# # plt.figure(figsize=(8, 5), dpi=300)
# # plt.scatter(num_c, diff_d_loc_p60, marker = '.', s = 500, alpha=0.5, label = 'p = 0.6')# Network 1')    
# # # plt.ylim([1.6,1.7])
# # plt.xlabel("Number of Dipoles", fontsize = 15)
# # plt.ylabel("$(D_{loc} - D_{loc,th})/D_{loc,th}$", fontsize = 15)
# # plt.yticks(fontsize = 15)
# # plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# # plt.legend(loc = 'lower right')
# # plt.savefig(fname_plot+"dip_moment_diff_loc_scatter_p60_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# # plt.clf()
# # plt.close()


# # plotting d_locs separately
# plt.figure(figsize=(8, 5), dpi=300)
# plt.scatter(num_c, d_loc_p70, marker = 'o', s = 100, c = 'g', alpha=0.5, label = '$D_{loc} p 0.7$')# Network 1')    
# # plt.scatter(num_c, d_loc_p75, marker = 'o', s = 100, c = 'g', alpha=0.5, label = '$D_{loc} p 0.75$')# Network 1')    
# plt.scatter(num_c, d_loc_p80, marker = 's', s = 100, c = 'b', alpha=0.5, label = '$D_{loc} p 0.8$')# Network 1')    
# plt.scatter(num_c, d_loc_p90, marker = 'd', s = 100, c = 'r', alpha=0.5, label = '$D_{loc} p 0.9$')# Network 1')    
# plt.scatter(num_c, d_loc_p1, marker = '>', s = 100, c = 'y', alpha=0.5, label = '$D_{loc} p 1$')# Network 1')  
# x_linspace = np.linspace(1,num_c[-1],100) 
# line_fit = d_loc_p1[0]*x_linspace
# plt.plot(x_linspace, line_fit) 

# # plt.ylim([1.6,1.7])
# plt.xlabel("Number of Dipoles", fontsize = 15)
# plt.ylabel("$D_{loc}$", fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# plt.legend(loc = 'upper left')
# plt.savefig(fname_plot+"dip_moment_loc_scatter_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")
# plt.clf()
# plt.close()

# # plotting d far scatter plot
# plt.figure(figsize=(8, 5), dpi=300)
# plt.scatter(num_c, d_far_p70, marker = '.', s = 500, alpha=0.5, label = 'p = 0.7')# Network 1')    
# # plt.scatter(num_c, d_far_p75, marker = '>', s = 100, alpha=0.5, label = 'p = 0.75')# Network 1')    
# plt.scatter(num_c, d_far_p80, marker = '<', s = 100, alpha=0.5, label = 'p = 0.8')# Network 1')    
# plt.scatter(num_c, d_far_p90, marker = '*', s = 100, alpha=0.5, label = 'p = 0.9')# Network 1')    
# plt.scatter(num_c, d_far_p1, marker = 's', s = 100, alpha=0.5, label = 'p = 1.0')# Network 1')    
# plt.plot(x_linspace, line_fit) 

# # plt.ylim([1.6,1.7])
# plt.xlabel("Number of Dipoles", fontsize = 15)
# plt.ylabel("$D_{far}$", fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# plt.legend(loc = 'lower right')
# plt.savefig(fname_plot+"dip_moment_scatter_p70_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")
# plt.clf()
# plt.close()


# plt.figure(figsize=(8, 5), dpi=300)
# plt.scatter(num_c, d_far_p70, marker = '.', s = 500, c = 'g', alpha=0.5, label = '$D_{far} p 0.7$')# Network 1')    
# # plt.scatter(num_c, d_loc_p70, marker = '>', s = 50, c = 'g', alpha=0.5, label = '$D_{loc} p 0.7$')# Network 1')    
# plt.scatter(num_c, d_far_p80, marker = '.', s = 500, c = 'b', alpha=0.5, label = '$D_{far} p 0.8$')# Network 1')    
# plt.scatter(num_c, d_loc_p80, marker = '>', s = 50, c = 'b', alpha=0.5, label = '$D_{loc} p 0.8$')# Network 1')    
# plt.scatter(num_c, d_far_p90, marker = '.', s = 500, c = 'r', alpha=0.5, label = '$D_{far} p 0.9$')# Network 1')    
# plt.scatter(num_c, d_loc_p90, marker = '>', s = 50, c = 'r', alpha=0.5, label = '$D_{loc} p 0.9$')# Network 1')    
# plt.scatter(num_c, d_far_p1, marker = '.', s = 500, c = 'y', alpha=0.5, label = '$D_{far} p 1$')# Network 1')    
# plt.scatter(num_c, d_loc_p1, marker = '>', s = 50, c = 'y', alpha=0.5, label = '$D_{loc} p 1$')# Network 1')    

# # plt.ylim([1.6,1.7])
# plt.xlabel("Number of Dipoles", fontsize = 15)
# plt.ylabel("$D_{far}, D_{loc}$", fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# plt.legend(loc = 'upper left')
# plt.savefig(fname_plot+"dip_moment_loc_far_scatter_p70_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")
# plt.clf()
# plt.close()


# # plt.figure(figsize=(8, 5), dpi=300)
# # plt.scatter(num_c, d_far_p60, marker = '.', s = 500, alpha=0.5, label = '$D_{far}$')# Network 1')    
# # plt.scatter(num_c, d_loc_p60, marker = '.', s = 500, alpha=0.5, label = '$D_{loc}$')# Network 1')    
# # # plt.ylim([1.6,1.7])
# # plt.xlabel("Number of Dipoles", fontsize = 15)
# # plt.ylabel("$D_{far}, D_{loc}$", fontsize = 15)
# # plt.yticks(fontsize = 15)
# # plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# # plt.legend(loc = 'lower right')
# # plt.savefig(fname_plot+"dip_moment_loc_far_scatter_p60_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# # plt.clf()
# # plt.close()

# plt.figure(figsize=(8, 5), dpi=300)
# plt.scatter(num_c, diff_d_loc_p70/d_loc_p70_th, marker = '.', s = 50, alpha=0.5, label = 'p = 0.7')# Network 1')    
# plt.scatter(num_c, diff_d_loc_p80/d_loc_p80_th, marker = '.', s = 50, alpha=0.5, label = 'p = 0.8')# Network 1')    
# plt.scatter(num_c, diff_d_loc_p90/d_loc_p90_th, marker = '.', s = 50, alpha=0.5, label = 'p = 0.9')# Network 1')    
# # plt.ylim([1.6,1.7])
# plt.xlabel("Number of Dipoles", fontsize = 15)
# plt.ylabel("$(D_{loc} - D_{loc,th})/D_{loc,th}$", fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# plt.legend(loc = 'upper right')
# plt.savefig(fname_plot+"dip_moment_loc_diff_scatter_p70_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")
# plt.clf()
# plt.close()

# #------------------------------------------------------------------------------
# # normalizing all values by the first value
# # d_far_p60_norm = d_far_p60/d_far_p60[0]
# d_far_p70_norm = d_far_p70/d_far_p70[0]
# d_far_p80_norm = d_far_p80/d_far_p80[0]
# d_far_p90_norm = d_far_p90/d_far_p90[0]
# d_far_p1_norm = d_far_p1/d_far_p1[0]

# plt.figure(figsize=(8, 5), dpi=300)
# # plt.scatter(num_c, d_far_p60_norm, marker = '*', s = 100, alpha=0.5, label = 'p = 0.6')# Network 1')    
# plt.scatter(num_c, d_far_p70_norm, marker = '.', s = 500, alpha=0.5, label = 'p = 0.7')# Network 1')    
# plt.scatter(num_c, d_far_p80_norm, marker = '.', s = 500, alpha=0.5, label = 'p = 0.8')# Network 1')    
# plt.scatter(num_c, d_far_p90_norm, marker = '.', s = 500, alpha=0.5, label = 'p = 0.9')# Network 1')    
# plt.scatter(num_c, d_far_p1_norm, marker = 's', s = 100, alpha=0.5, label = 'p = 1')# Network 1')  

  
# # plt.ylim([1.6,1.7])
# plt.xlabel("Number of Dipoles", fontsize = 15)
# plt.ylabel("$D_{far}/D_{far,1}$", fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# plt.legend(loc = 'lower right')
# plt.savefig(fname_plot+"dip_moment_nomralized_scatter_p70_p60_p1_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# plt.clf()
# plt.close()

# #------------------------------------------------------------------------------
# # checking if d_far at N  = d_far of 1 dipole * N 
# # d_far_p60_norm = d_far_p60/d_far_p60[0]
# d_far_p70_th = num_c*d_far_p70[0]
# # d_far_p75_th = num_c*d_far_p75[0]
# d_far_p80_th = num_c*d_far_p80[0]
# d_far_p90_th = num_c*d_far_p90[0]
# d_far_p1_th = num_c*d_far_p1[0]

# plt.figure(figsize=(8, 5), dpi=300)
# # plt.scatter(num_c, d_far_p60_norm, marker = '*', s = 100, alpha=0.5, label = 'p = 0.6')# Network 1')    
# plt.plot(num_c, d_far_p70_th, alpha=0.5)# Network 1')    
# # plt.plot(num_c, d_far_p75_th, alpha=0.5)# Network 1')    
# plt.plot(num_c, d_far_p80_th, alpha=0.5)# Network 1')    
# plt.plot(num_c, d_far_p90_th, alpha=0.5)# Network 1')    
# plt.plot(num_c, d_far_p1_th, alpha=0.5)# Network 1')   

# plt.scatter(num_c, d_far_p70, marker = '>', s = 100, alpha=0.5, label = 'p = 0.75')# Network 1')    
# # plt.scatter(num_c, d_far_p75, marker = '>', s = 100, alpha=0.5, label = 'p = 0.75')# Network 1')    
# plt.scatter(num_c, d_far_p80, marker = '<', s = 100, alpha=0.5, label = 'p = 0.8')# Network 1')    
# plt.scatter(num_c, d_far_p90, marker = '*', s = 100, alpha=0.5, label = 'p = 0.9')# Network 1')    
# plt.scatter(num_c, d_far_p1, marker = 's', s = 100, alpha=0.5, label = 'p = 1.0')# Network 1')    
 
# plt.plot(x_linspace, line_fit, linestyle='dotted', lw = 5)  # the line of d_loc

# # plt.ylim([1.6,1.7])
# plt.xlabel("Number of Dipoles", fontsize = 15)
# plt.ylabel("$D_{far}$", fontsize = 15)
# plt.yticks(fontsize = 15)
# plt.subplots_adjust(right=0.96,left=0.18,top=0.94,bottom=0.12)
# plt.legend(loc = 'best')
# plt.savefig(fname_plot+"dip_moment_far_scaling_"+str(num_center)+"_"+str(num_dip)+"_"+kappa_str+"_"+tol_str+"_"+rlen_txt+"_"+mu_str+"_"+mu_c_str+".png")

# plt.clf()
# plt.close()
